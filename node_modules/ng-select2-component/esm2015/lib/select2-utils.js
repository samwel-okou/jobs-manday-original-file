/**
 * @fileoverview added by tsickle
 * Generated from: lib/select2-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { defaultMinCountForSearch, protectRegexp, unicodePatterns } from './select2-const';
export class Select2Utils {
    /**
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    static getOptionByValue(data, value) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                /** @type {?} */
                const options = ((/** @type {?} */ (groupOrOption))).options;
                if (options) {
                    for (const option of options) {
                        if (option.value === value) {
                            return option;
                        }
                    }
                }
                else {
                    if (((/** @type {?} */ (groupOrOption))).value === value) {
                        return (/** @type {?} */ (groupOrOption));
                    }
                }
            }
        }
        return null;
    }
    /**
     * @param {?} data
     * @param {?} value
     * @param {?} multiple
     * @return {?}
     */
    static getOptionsByValue(data, value, multiple) {
        if (multiple) {
            /** @type {?} */
            const values = Array.isArray(value) ? value : [];
            /** @type {?} */
            const result = [];
            for (const v of values) {
                /** @type {?} */
                const option = Select2Utils.getOptionByValue(data, v);
                if (option) {
                    result.push(option);
                }
            }
            return result;
        }
        return Select2Utils.getOptionByValue(data, (/** @type {?} */ (value)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static getFirstAvailableOption(data) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                /** @type {?} */
                const options = ((/** @type {?} */ (groupOrOption))).options;
                if (options) {
                    for (const option of options) {
                        if (!option.disabled) {
                            return option.value;
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const option = (/** @type {?} */ (groupOrOption));
                    if (!option.disabled) {
                        return option.value;
                    }
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    static getOptionsCount(data) {
        /** @type {?} */
        let count = 0;
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                /** @type {?} */
                const options = ((/** @type {?} */ (groupOrOption))).options;
                if (options) {
                    count += options.length;
                }
                else {
                    count++;
                }
            }
        }
        return count;
    }
    /**
     * @param {?} filteredData
     * @param {?} value
     * @return {?}
     */
    static valueIsNotInFilteredData(filteredData, value) {
        if (Select2Utils.isNullOrUndefined(value)) {
            return true;
        }
        for (const groupOrOption of filteredData) {
            /** @type {?} */
            const options = ((/** @type {?} */ (groupOrOption))).options;
            if (options) {
                for (const option of options) {
                    if (option.value === value) {
                        return false;
                    }
                }
            }
            else {
                if (((/** @type {?} */ (groupOrOption))).value === value) {
                    return false;
                }
            }
        }
        return true;
    }
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} filteredData
     * @param {?} hoveringValue
     * @return {?}
     */
    static getPreviousOption(filteredData, hoveringValue) {
        /** @type {?} */
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (let i = filteredData.length - 1; i >= 0; i--) {
            /** @type {?} */
            const groupOrOption = filteredData[i];
            /** @type {?} */
            const options = ((/** @type {?} */ (groupOrOption))).options;
            if (options) {
                for (let j = options.length - 1; j >= 0; j--) {
                    /** @type {?} */
                    const option = options[j];
                    if (findIt) {
                        if (!option.disabled && !option.hide) {
                            return option;
                        }
                    }
                    if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                /** @type {?} */
                const option = (/** @type {?} */ (groupOrOption));
                if (findIt) {
                    if (!option.disabled && !option.hide) {
                        return option;
                    }
                }
                if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    // tslint:disable-next-line:cognitive-complexity
    /**
     * @param {?} filteredData
     * @param {?} hoveringValue
     * @return {?}
     */
    static getNextOption(filteredData, hoveringValue) {
        /** @type {?} */
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (const groupOrOption of filteredData) {
            /** @type {?} */
            const options = ((/** @type {?} */ (groupOrOption))).options;
            if (options) {
                for (const option of options) {
                    if (findIt) {
                        if (!option.disabled && !option.hide) {
                            return option;
                        }
                    }
                    else if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                /** @type {?} */
                const option = (/** @type {?} */ (groupOrOption));
                if (findIt) {
                    if (!option.disabled && !option.hide) {
                        return option;
                    }
                }
                else if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    static isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
    /**
     * @private
     * @param {?} label
     * @param {?} searchText
     * @param {?} editPattern
     * @return {?}
     */
    static containSearchText(label, searchText, editPattern) {
        return searchText
            ? Select2Utils.formatSansUnicode(label).match(new RegExp(Select2Utils.formatPattern(searchText, editPattern), 'i')) !== null
            : true;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    static protectPattern(str) {
        return str.replace(protectRegexp, '\\$&');
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    static formatSansUnicode(str) {
        for (const unicodePattern of unicodePatterns) {
            str = str.replace(unicodePattern.s, unicodePattern.l);
        }
        return str;
    }
    /**
     * @private
     * @param {?} str
     * @param {?} editPattern
     * @return {?}
     */
    static formatPattern(str, editPattern) {
        str = Select2Utils.formatSansUnicode(Select2Utils.protectPattern(str));
        if (editPattern && typeof editPattern === 'function') {
            str = editPattern(str);
        }
        return str;
    }
    /**
     * @param {?} data
     * @param {?} searchText
     * @param {?=} editPattern
     * @return {?}
     */
    static getFilteredData(data, searchText, editPattern) {
        if (searchText) {
            /** @type {?} */
            const result = [];
            for (const groupOrOption of data) {
                /** @type {?} */
                const options = ((/** @type {?} */ (groupOrOption))).options;
                if (options) {
                    if (options.some((/**
                     * @param {?} group
                     * @return {?}
                     */
                    group => Select2Utils.containSearchText(group.label, searchText, editPattern)))) {
                        /** @type {?} */
                        const filteredOptions = options.filter((/**
                         * @param {?} group
                         * @return {?}
                         */
                        group => Select2Utils.containSearchText(group.label, searchText, editPattern)));
                        result.push({
                            label: groupOrOption.label,
                            options: filteredOptions,
                        });
                    }
                }
                else if (Select2Utils.containSearchText(groupOrOption.label, searchText, editPattern)) {
                    result.push(groupOrOption);
                }
            }
            return result;
        }
        else {
            return data;
        }
    }
    /**
     * @param {?} data
     * @param {?} selectedOptions
     * @return {?}
     */
    static getFilteredSelectedData(data, selectedOptions) {
        /** @type {?} */
        const result = [];
        for (const groupOrOption of data) {
            /** @type {?} */
            const options = ((/** @type {?} */ (groupOrOption))).options;
            if (options) {
                /** @type {?} */
                const filteredOptions = options.filter((/**
                 * @param {?} group
                 * @return {?}
                 */
                group => Select2Utils.isSelected(selectedOptions, group, true) === 'false'));
                if (filteredOptions.length) {
                    result.push({
                        label: groupOrOption.label,
                        options: filteredOptions,
                    });
                }
            }
            else if (Select2Utils.isSelected(selectedOptions, (/** @type {?} */ (groupOrOption)), true) === 'false') {
                result.push(groupOrOption);
            }
        }
        return result;
    }
    /**
     * @param {?} data
     * @param {?=} minCountForSearch
     * @return {?}
     */
    static isSearchboxHiddex(data, minCountForSearch) {
        if (minCountForSearch === '' ||
            minCountForSearch === undefined ||
            minCountForSearch === null ||
            isNaN(+minCountForSearch)) {
            minCountForSearch = defaultMinCountForSearch;
        }
        /** @type {?} */
        const optionCount = Select2Utils.getOptionsCount(data);
        return optionCount < +minCountForSearch;
    }
    /**
     * @param {?} options
     * @param {?} option
     * @param {?} multiple
     * @return {?}
     */
    static isSelected(options, option, multiple) {
        return multiple
            ? options && ((/** @type {?} */ (options))).some((/**
             * @param {?} op
             * @return {?}
             */
            op => op.value === option.value))
                ? 'true'
                : 'false'
            : options && option.value === ((/** @type {?} */ (options))).value
                ? 'true'
                : 'false';
    }
    /**
     * @param {?} options
     * @param {?} option
     * @return {?}
     */
    static removeSelection(options, option) {
        for (let i = 0; i < ((/** @type {?} */ (options))).length; i++) {
            if (((/** @type {?} */ (options)))[i].value === option.value) {
                ((/** @type {?} */ (options))).splice(i, 1);
                return;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,